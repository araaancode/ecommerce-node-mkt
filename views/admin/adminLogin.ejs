<!DOCTYPE html>
<html dir="rtl" lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <link rel="shortcut icon" href="../images/3.png" type="image/x-icon" />
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.1/css/all.min.css"
    />
    <link rel="stylesheet" href="../css/login.css" />
    <style>
      /* Import Google font - Poppins */
      @import url("https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap");
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: "Poppins", sans-serif;
      }
      :root {
        --dark: #34495e;
        --light: #ffffff;
        --success: #0abf30;
        --error: #e24d4c;
        --warning: #e9bd0c;
        --info: #3498db;
      }
      body {
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: 100vh;
      }
      .notifications {
        position: fixed;
        top: 30px;
        right: 20px;
      }
      .notifications :where(.toast, .column) {
        display: flex;
        align-items: center;
      }
      .notifications .toast {
        width: 400px;
        position: relative;
        overflow: hidden;
        list-style: none;
        border-radius: 4px;
        padding: 16px 17px;
        margin-bottom: 10px;
        background: var(--light);
        justify-content: space-between;
        animation: show_toast 0.3s ease forwards;
      }
      @keyframes show_toast {
        0% {
          transform: translateX(100%);
        }
        40% {
          transform: translateX(-5%);
        }
        80% {
          transform: translateX(0%);
        }
        100% {
          transform: translateX(-10px);
        }
      }
      .notifications .toast.hide {
        animation: hide_toast 0.3s ease forwards;
      }
      @keyframes hide_toast {
        0% {
          transform: translateX(-10px);
        }
        40% {
          transform: translateX(0%);
        }
        80% {
          transform: translateX(-5%);
        }
        100% {
          transform: translateX(calc(100% + 20px));
        }
      }
      .toast::before {
        position: absolute;
        content: "";
        height: 3px;
        width: 100%;
        bottom: 0px;
        left: 0px;
        animation: progress 5s linear forwards;
      }
      @keyframes progress {
        100% {
          width: 0%;
        }
      }
      .toast.success::before,
      .btn#success {
        background: var(--success);
      }
      .toast.error::before,
      .btn#error {
        background: var(--error);
      }
      .toast.warning::before,
      .btn#warning {
        background: var(--warning);
      }
      .toast.info::before,
      .btn#info {
        background: var(--info);
      }
      .toast .column i {
        font-size: 1.75rem;
      }
      .toast.success .column i {
        color: var(--success);
      }
      .toast.error .column i {
        color: var(--error);
      }
      .toast.warning .column i {
        color: var(--warning);
      }
      .toast.info .column i {
        color: var(--info);
      }
      .toast .column span {
        font-size: 1.07rem;
        margin-left: 12px;
      }
      .toast i:last-child {
        color: #aeb0d7;
        cursor: pointer;
      }
      .toast i:last-child:hover {
        color: var(--dark);
      }
      .buttons .btn {
        border: none;
        outline: none;
        cursor: pointer;
        margin: 0 5px;
        color: var(--light);
        font-size: 1.2rem;
        padding: 10px 20px;
        border-radius: 4px;
      }

      @media screen and (max-width: 530px) {
        .notifications {
          width: 95%;
        }
        .notifications .toast {
          width: 100%;
          font-size: 1rem;
          margin-left: 20px;
        }
        .buttons .btn {
          margin: 0 1px;
          font-size: 1.1rem;
          padding: 8px 15px;
        }
      }
    </style>
    <title><%=title%></title>
  </head>
  <body>
    <ul class="notifications"></ul>
    <!--<div class="buttons">
      <button class="btn" id="success">Success</button>
      <button class="btn" id="error">Error</button>
      <button class="btn" id="warning">Warning</button>
      <button class="btn" id="info">Info</button>
    </div> -->

    <div class="container">
      <a href="/admin">
        <img
          style="width: 20%; height: 20%; margin: 30px 40% 6px 40%"
          src="../images/3.png"
          alt=""
        />
      </a>

      <form action="javascript:void(0);" id="form" method="POST" class="form">
        <div class="form-control">
          <input
            type="text"
            name="email"
            id="email"
            value=""
            placeholder="ایمیل را وارد کنید"
          />
          <small style="text-align: right; float: right">Error message</small>
        </div>
        <div class="form-control">
          <input
            type="password"
            name="password"
            id="password"
            value=""
            placeholder="گذرواژه را وارد کنید "
          />
          <small style="text-align: right; float: right">Error message</small>
        </div>

        <button id="login-btn">ورود به پنل مدیریت</button>
      </form>
    </div>

    <script>
      let email = document.getElementById("email");
      let password = document.getElementById("password");
      let loginBtn = document.getElementById("login-btn");
      const notifications = document.querySelector(".notifications");

      // Object containing details for different types of toasts
      const toastDetails = {
        timer: 5000,
        success: {
          icon: "fa-circle-check",
          text: "Success: This is a success toast.",
        },
        error: {
          icon: "fa-circle-xmark",
          text: "Error: This is an error toast.",
        },
        warning: {
          icon: "fa-triangle-exclamation",
          text: "Warning: This is a warning toast.",
        },
        info: {
          icon: "fa-circle-info",
          text: "Info: This is an information toast.",
        },
      };

      const removeToast = (toast) => {
        toast.classList.add("hide");
        if (toast.timeoutId) clearTimeout(toast.timeoutId); // Clearing the timeout for the toast
        setTimeout(() => toast.remove(), 500); // Removing the toast after 500ms
      };

      const createToast = (id, icon, text) => {
        // Getting the icon and text for the toast based on the id passed
        // const { icon, text } = toastDetails[id];
        const toast = document.createElement("li"); // Creating a new 'li' element for the toast
        toast.className = `toast ${id}`; // Setting the classes for the toast
        // Setting the inner HTML for the toast
        toast.innerHTML = `<div class="column">
                   <i class="fa-solid ${icon}"></i>
                   <span style="margin-right:10px"> ${text}</span>
                </div>
                <i class="fa-solid fa-xmark" onclick="removeToast(this.parentElement)"></i>`;
        notifications.appendChild(toast); // Append the toast to the notification ul
        // Setting a timeout to remove the toast after the specified duration
        toast.timeoutId = setTimeout(() => removeToast(toast), 5000);
      };

      // Example POST method implementation:
      async function loginUser(url = "", data = {}) {
        // Default options are marked with *
        const response = await fetch(url, {
          method: "POST", // *GET, POST, PUT, DELETE, etc.
          mode: "cors", // no-cors, *cors, same-origin
          cache: "no-cache", // *default, no-cache, reload, force-cache, only-if-cached
          credentials: "same-origin", // include, *same-origin, omit
          headers: {
            "Content-Type": "application/json",
            // 'Content-Type': 'application/x-www-form-urlencoded',
          },
          redirect: "follow", // manual, *follow, error
          referrerPolicy: "no-referrer", // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
          body: JSON.stringify(data), // body data type must match "Content-Type" header
        });
        return response.json(); // parses JSON response into native JavaScript objects
      }

      loginBtn.addEventListener("click", function (e) {
        e.preventDefault();

        if (
          email.value === "" ||
          email.value === null ||
          email.value === undefined
        ) {
          let msg = "ایمیل نباید خالی باشد";
          createToast("error", "fa-circle-xmark", msg);
        }

        if (
          password.value === "" ||
          password.value === null ||
          password.value === undefined
        ) {
          let msg = "گذرواژه نباید خالی باشد";
          createToast("error", "fa-circle-xmark", msg);
        } else {
          loginUser("/api/auth/admin/login", {
            email: email.value,
            password: password.value,
          })
            .then((data) => {
              let msgCode = data.msgCode;
              switch (msgCode) {
                case 1:
                  createToast("warning", "fa-triangle-exclamation", data.msg);
                  break;

                case 2:
                  console.log(data._id);
                  localStorage.setItem("userId", JSON.stringify(data._id));
                  createToast("success", "fa-circle-check", data.msg);
                  setTimeout(() => {
                    location.reload();
                  }, 5000);
                  break;

                case 3:
                  createToast("error", "fa-circle-xmark", data.msg);
                  break;

                case 4:
                  createToast("info", "fa-circle-info", data.msg);
                  break;
                default:
                  break;
              }
            })
            .catch((error) => {
              createToast("error", "fa-circle-xmark", error);
            });
        }
      });
    </script>
  </body>
</html>
